@page "/TukarPassword/{id}"
@using System.Threading.Tasks


@layout EmptyLayout
@inject IConfiguration _conf
@inject IServices _services
@rendermode InteractiveServer
@* @rendermode @(new InteractiveServerRenderMode(prerender: false)) *@
@attribute [Authorize]
@inject IIdentityAuthenticationLib myIden
@inject NavigationManager NavMan
@inject IJSRuntime JSRuntime
@inject SweetAlertService Swal


@if (isLoading)
{
	<div class="loading-overlay">
		<LoadingProgress />
	</div>
}

<div class="container">
	<div class="row justify-content-center">
		<div class="d-flex justify-content-center align-items-center min-vh-100">
			<div class="card shadow-lg" style="width: 70%;">
				<div class="card-header text-center">
					<img src="/images/mainslong.png" />
				</div>
				<div class="card-body">
					<div class="col-12 text-center">
						<h4 class="mb-4">Pengurusan Id Pengguna - Tukar Kata Laluan</h4>
					</div>
					<div class="mx-auto" style="max-width: 400px;">

						<!-- Current Password -->
						<div class="mb-3">
							<label class="form-label">Katalaluan Semasa</label>
							<div class="position-relative">
								<input @ref="Pass1" id="passCurrent" class="form-control" type="password" @onchange="CheckPassword" />
								<i onclick="togglePassword('passCurrent', this)"></i>
							</div>
						</div>

						@if (showNewPassword)
						{
							<div class="mb-2">
								<small><span style="color :red;">Katalaluan sekurangnya 8 char dengan satu huruf BESAR, satu digit NOMBOR dan sekurangnya satu huruf KHAS $!%*#?& </span></small>
							</div>
							<!-- New Password -->
							<div class="mb-3">
								<label class="form-label">Katalaluan Baru</label>
								<div class="position-relative">
									<input @ref="Pass2" id="passNew1" class="form-control" @bind="NewPassword1" type="password" />
									<i onclick="togglePassword('passNew1', this)"></i>
								</div>
							</div>

							<!-- Confirm New Password -->
							<div class="mb-3">
								<label class="form-label">Katalaluan Baru (Pengesahan)</label>
								<div class="position-relative">
									<input id="passNew2" class="form-control" type="password" @onchange="CheckSamaPassword" />
									<i onclick="togglePassword('passNew2', this)"></i>
								</div>
							</div>

							<div class="d-flex justify-content-center gap-3">
								<button class="btn btn-success" @onclick="UpdatePassword">
									<i class="bi bi-floppy2-fill pe-2 py-2"></i>Kemaskini Katalaluan
								</button>
								<button class="btn btn-outline-warning" @onclick="GoingHome">
									Kembali ...
								</button>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<style type="text/css">

	.toggle-icon {
		position: absolute;
		top: 50%;
		right: 0.75rem;
		transform: translateY(-50%);
		cursor: pointer;
		color: #6c757d;
		z-index: 2; /* ✨ bring it above the input */
		pointer-events: auto; /* ensure it accepts clicks */
	}

		.toggle-icon:hover {
			color: #000;
		}

	.form-control {
		padding-right: 2.5rem; /* ✨ space so text doesn't overlap icon */
	}

</style>

@code {
	[Parameter]
	public string id { get; set; } = string.Empty;

	public bool isLoading = false;
	public string Mode = string.Empty;
	public bool adaRekod = false; public bool adaChart = false;
	public string NamaPekerja = string.Empty;
	public string NAMA = string.Empty;
	public string NoStaf = string.Empty;
	public ElementReference Pass1; public ElementReference Pass2;
	public string Idd = string.Empty;
	public bool showNewPassword = false;

	public string NewPassword1 = string.Empty;
	public string NewPassword2 = string.Empty; public string CurrentPassword = string.Empty;


	private void GoingHome()
	{
		string baseUrl = (Mode == "Dev") ? "/" : "/rekodkedatangan/";
		NavMan.NavigateTo(NavMan.ToAbsoluteUri(baseUrl).ToString(), true);
	}

	protected override async Task OnParametersSetAsync()
	{
		Idd = EncryptionHelper.Decode(id);
		await Task.CompletedTask;
		StateHasChanged();
	}


	protected override async Task OnInitializedAsync()
	{
		Mode = _conf["Mode"]?.ToString() ?? string.Empty;
		var authState = await myIden.GetUserAsync();
		var user = authState.Identity as ClaimsIdentity;
		NamaPekerja = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value ?? "";
		NoStaf = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value ?? "";

		if (user == null || !user.IsAuthenticated)
		{
			await myIden.SignOutUserAsync();
			string baseUrl = (Mode == "Dev") ? "/SessiTamat" : "/rekodkedatangan/SessiTamat";
			NavMan.NavigateTo(NavMan.ToAbsoluteUri(baseUrl).ToString(), true);
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadFile();
			await Pass1.FocusAsync();
			StateHasChanged();
		}
	}

	private async Task LoadFile()
	{
		await JSRuntime.InvokeVoidAsync("loadSweetAlert");
	}

	private bool _isCheckingPassword = false;

	private async Task CheckPassword(ChangeEventArgs e)
	{
		CurrentPassword = e?.Value?.ToString() ?? string.Empty;

		if (_isCheckingPassword)
			return; // prevent re-entry loop

		_isCheckingPassword = true;

		try
		{
			if (!string.IsNullOrWhiteSpace(Idd))
			{
				var user = await _services.GetUserByIdAsync(Convert.ToInt32(Idd));
				if (user is not null)
				{
					var isValid = BCrypt.Net.BCrypt.EnhancedVerify(CurrentPassword, user.Password);

					if (!isValid)
					{
						await Swal.FireAsync(new SweetAlertOptions
						{
							Title = "Pastikan katalaluan semasa adalah BETUL dan TEPAT",
							Text = "Info Katalaluan",
							Icon = SweetAlertIcon.Error,
							ShowCancelButton = false,
							ConfirmButtonText = "Ok"
						});

						CurrentPassword = string.Empty; StateHasChanged();
						await Task.Delay(100);
						await Pass1.FocusAsync(); showNewPassword = false;
					}
					else
					{
						showNewPassword = true;
						await Pass2.FocusAsync();
						StateHasChanged();
					}
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			// optional: show Swal error too
		}
		finally
		{
			_isCheckingPassword = false;
		}
	}

	private async Task CheckSamaPassword(ChangeEventArgs e)
	{
		NewPassword2 = e?.Value?.ToString() ?? string.Empty;
		if (NewPassword1 != NewPassword2)
		{
			await Swal.FireAsync(new SweetAlertOptions { Title = "Katalaluan BARU dan PENGESAHAN tidak sama", Text = "Info Katalaluan", Icon = SweetAlertIcon.Error, ShowCancelButton = false, ConfirmButtonText = "Ok" });
			NewPassword1 = string.Empty; NewPassword2 = string.Empty; StateHasChanged();
		}
		else if (!string.IsNullOrEmpty(NewPassword1) && !string.IsNullOrEmpty(NewPassword2)) 
		{  
			bool ada1 = _services.IsPasswordValid(NewPassword1); 
			bool ada2 = _services.IsPasswordValid(NewPassword2);
			if (!ada1 || !ada2) 
			{ 
				await Swal.FireAsync(new SweetAlertOptions { Title = "Katalaluan Tidak Memenuhi Spesifikasi Ditetapkan", Text = "Info Katalaluan", Icon = SweetAlertIcon.Error, ShowCancelButton = false, ConfirmButtonText = "Ok" });
				NewPassword1 = string.Empty; 
				NewPassword2 = string.Empty; 
				StateHasChanged(); 
			} 
		}
	}

	private async Task UpdatePassword()
	{
		try
		{
			if (!string.IsNullOrEmpty(NewPassword1) && !string.IsNullOrEmpty(NewPassword2))
			{
				bool ada1 = _services.IsPasswordValid(NewPassword1);
				bool ada2 = _services.IsPasswordValid(NewPassword2);
				if (ada1 && ada2)
				{
					bool res = await _services.KemaskiniPasswordBaru(Idd, BCrypt.Net.BCrypt.EnhancedHashPassword(NewPassword1));
					if (res)
					{
						await _services.InsertAuditLogAsync("MA" + NoStaf, "Update new password to status 2");
						await Swal.FireAsync(new SweetAlertOptions { Title = "Katalaluan Berjaya Dikemaskini. Sila Login Semula", Text = "Info Katalaluan", Icon = SweetAlertIcon.Success, ShowCancelButton = false, ConfirmButtonText = "Ok" });
						string baseUrl = (Mode == "Dev") ? "/" : "/rekodkedatangan/";
						NavMan.NavigateTo(NavMan.ToAbsoluteUri(baseUrl).ToString(), true);
					}
					else
					{
						await _services.InsertAuditLogAsync("MA" + NoStaf, "Update new password to status 2 - Failed");
						await Swal.FireAsync(new SweetAlertOptions { Title = "Katalaluan Tidak Berjaya Dikemaskini. Sila Cuba Semula", Text = "Info Katalaluan", Icon = SweetAlertIcon.Error, ShowCancelButton = false, ConfirmButtonText = "Ok" });

					}
				}
			}
		}
		catch(System.Exception err)
		{
			Console.WriteLine(err.Message);
			throw new Exception(err.Message);
		}
	}

}
