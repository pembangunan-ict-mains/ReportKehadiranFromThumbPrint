@page "/LihatLaporan"


@layout MainLayout
@inject IConfiguration _conf
@inject IServices _services
@rendermode InteractiveServer
@attribute [Authorize]
@inject IIdentityAuthenticationLib myIden
@inject NavigationManager NavMan
@inject IJSRuntime JSRuntime
@inject SweetAlertService Swal

@if (isLoading)
{
    <div class="loading-overlay">
        <LoadingProgress />
    </div>
}

<div class="container-fluid">
    <div class="card shadow-lg">
        <div class="card-body">
            <h4 class="mb-4" style="text-align:center;">LAPORAN KEHADIRAN PEKERJA MAINS</h4>
            <div class="card py-3 me-3">
                <h6 class="text-center">Pilih Bulan dan Tahun Yang Diperlukan</h6>
                <div class="row d-flex justify-content-center mt-2 mb-3 ">
                    <div class="col-sm-12 col-md-3">
                        <select class="form-select" @bind="SelectedMonth">
                            <option class="fw-bold" value="">Pilih Bulan</option>
                            <option class="fw-bold" value="1">Januari</option>
                            <option class="fw-bold" value="2">Februari</option>
                            <option class="fw-bold" value="3">Mac</option>
                            <option class="fw-bold" value="4">April</option>
                            <option class="fw-bold" value="5">Mei</option>
                            <option class="fw-bold" value="6">Jun</option>
                            <option class="fw-bold" value="7">Julai</option>
                            <option class="fw-bold" value="8">Ogos</option>
                            <option class="fw-bold" value="9">September</option>
                            <option class="fw-bold" value="10">Oktober</option>
                            <option class="fw-bold" value="11">November</option>
                            <option class="fw-bold" value="12">Disember</option>
                        </select>
                    </div>
                    <div class="col-sm-12 col-md-2">
                        <select id="yearSelect" class="form-select" @bind="SelectedYear">
                            <option class="fw-bold" value="">Pilih Tahun</option>
                            @foreach (var year in Years)
                            {
                                <option class="fw-bold" value="@year">@year</option>
                            }
                        </select>
                    </div>
                    <div class="col-sm-12 col-md-3">
                        <button class="btn btn-outline-success" @onclick="GetData">
                            <i class="fa-regular fa-cassette-tape pe-2"></i>
                            Jana Laporan Bulanan
                        </button>
                    </div>
                </div>
            </div>           
        </div>
    </div>
</div>


@code {
    public string Mode = string.Empty;
    public bool adaRekod = false;  public bool adaChart = false;
    public string NamaPekerja = string.Empty;
    public string NAMA = string.Empty;
    public string NoStaf = string.Empty;
    public bool isLoading = false;

    private List<int> Years { get; set; } = new();
    private int SelectedYear { get; set; }
    private int SelectedMonth { get; set; }

    private async Task LoadFile()
    {
        await JSRuntime.InvokeVoidAsync("loadSweetAlert");
    }

    protected override void OnInitialized()
    {
        Mode = _conf["Mode"]?.ToString() ?? string.Empty;
        GenerateYears();
    }

    private async Task LoadInitialize()
    {
        var tableIds = new[] { "myTable", "myTable2", "myTable3", "myTable4", "myTable5", "myTable6", "myTable7", "myTable8" };
        foreach (var id in tableIds)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeDataTable", id);
            }
            catch (JSDisconnectedException)
            {
                Console.WriteLine($"Skip init table {id}, circuit disconnected.");
            }
        }
    }

    private bool shouldInitializeTables = false;
    private bool isFirstRender = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldInitializeTables)
        {
            await LoadFile();
            await Task.Delay(300); // Give DOM time to settle
            var tableIds = new[] { "myTable", "myTable2", "myTable3", "myTable4", "myTable5", "myTable6", "myTable7", "myTable8" };

            foreach (var id in tableIds)
            {
                try
                {
                    await JSRuntime.InvokeVoidAsync("initializeDataTable", id);
                }
                catch (JSDisconnectedException)
                {
                    Console.WriteLine($"Skip init table {id}, circuit disconnected.");
                }
            }
            shouldInitializeTables = false; // Reset flag
        }
    }
    private void GenerateYears()
    {
        int currentYear = DateTime.Now.Year;
        int startYear = currentYear - 1;
        int endYear = currentYear + 3;

        Years = Enumerable.Range(startYear, endYear - startYear + 1).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        Mode = _conf["Mode"]?.ToString() ?? string.Empty;
        var authState = await myIden.GetUserAsync();
        var user = authState.Identity as ClaimsIdentity;
        NamaPekerja = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value ?? "";
        NoStaf = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value ?? "";

        if (user == null || !user.IsAuthenticated)
        {
            await myIden.SignOutUserAsync();
            string baseUrl = (Mode == "Dev") ? "/SessiTamat" : "/rekodkedatangan/SessiTamat";
            NavMan.NavigateTo(NavMan.ToAbsoluteUri(baseUrl).ToString(), true);
        }
    }


    private bool _disposed;

    public async ValueTask DisposeAsync()
    {
        _disposed = true;
        await Task.CompletedTask;
    }

    private async Task GetData()
    {
        try
        {
            if (SelectedMonth == 0 || SelectedYear == 0)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Sila Pilih Bulan dan Tahun Terlebih Dahulu?",
                        Text = "Info",
                        Icon = SweetAlertIcon.Error,
                        ShowCancelButton = false,
                        ConfirmButtonText = "Ya"
                    });
                return;
            }
            else
            {
                await _services.InsertAuditLogAsync("MA" + NoStaf, "Klik Button GetData, Get Record For " + SelectedMonth + "/" + SelectedYear);
                var Bulan = SelectedMonth; var Tahun = SelectedYear;
                string baseUrl = (Mode == "Dev") ? $"/ShowData/{Bulan}/{Tahun}" : $"/rekodkedatangan/ShowData/{Bulan}/{Tahun}";
                NavMan.NavigateTo(NavMan.ToAbsoluteUri(baseUrl).ToString(), true);
            }
        }
        catch(System.Exception err)
        {
            throw;
        }
    }



    // async Task ExportExcellHL()
    // {
    //     var fileName = "LaporanKeseluruhan " + jenisData + ".csv";
    //     var content = _utils.ExportToCSV(_reportHL);
    //     await _utils.DownloadFile(fileName, content, "text/csv");
    // }

}
